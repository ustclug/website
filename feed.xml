<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://lug.ustc.edu.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lug.ustc.edu.cn/" rel="alternate" type="text/html" /><updated>2024-12-20T20:51:16+08:00</updated><id>https://lug.ustc.edu.cn/feed.xml</id><title type="html">LUG @ USTC</title><subtitle>中国科学技术大学 Linux 用户协会</subtitle><author><name>USTCLUG</name></author><entry><title type="html">镜像站 ZFS 实践</title><link href="https://lug.ustc.edu.cn/planet/2024/12/ustc-mirrors-zfs-rebuild/" rel="alternate" type="text/html" title="镜像站 ZFS 实践" /><published>2024-12-09T00:00:00+08:00</published><updated>2024-12-14T13:31:50+08:00</updated><id>https://lug.ustc.edu.cn/planet/2024/12/ustc-mirrors-zfs-rebuild</id><content type="html" xml:base="https://lug.ustc.edu.cn/planet/2024/12/ustc-mirrors-zfs-rebuild/"><![CDATA[<p>A.K.A. 如何让 2000 元的机械硬盘跑得比 3000 元的固态硬盘还快（</p>
      <p>本文另有<a href="https://ibug.io/p/74">英文版</a>及在南京大学分享时使用的<a href="https://ibug.io/p/72">幻灯片</a>。</p>
      <h2 id="background">背景</h2>
      <p>由中科大 Linux 用户协会维护的<a href="https://mirrors.ustc.edu.cn/">中科大开源软件镜像站</a>是中国大陆高校访问量最大、收录最全的开源软件镜像之一。
        在 2024 年 5 月至 6 月期间，我们的镜像站服务的流量大约是每天 36 TiB，主要分为以下两大类：</p>
      <ul>
        <li>HTTP/HTTPS 流量 19 TiB，请求量 1700 万</li>
        <li>Rsync 流量 10.3 TiB，请求量 2.18 万（如果算上一个异常的客户端，那么总数是 14.78 万）</li>
      </ul>
      <p>多年以来，随着现有镜像仓库容量的增加和新镜像仓库的加入，我们的服务器硬盘容量已经十分紧张了。目前提供镜像服务的两台服务器的磁盘容量都已经接近极限了：</p>
      <ul>
        <li>主（HTTP）服务器采用 XFS 文件系统，在 2023 年 12 月 18 日达到了 63.3 TiB（总容量 66.0 TiB，使用率 96%）；</li>
        <li>副（Rsync）服务器采用 ZFS 文件系统，在 2023 年 11 月 21 日达到了 42.4 TiB（总容量 43.2 TiB，使用率 98%）。</li>
      </ul>
      <p>两台服务器的配置分别如下：</p>
      <dl>
        <dt>HTTP 服务器</dt>
        <dd>
          <ul>
            <li>2020 年秋季搭建</li>
            <li>第二代至强可扩展处理器（Cascade Lake）和 256 GB DDR4 内存</li>
            <li>12 块 10 TB HDD + 一块 2 TB SSD</li>
            <li>在硬件 RAID 上使用 LVM 和 XFS</li>
            <li>由于 XFS（截至本次重建时）不支持压缩，因此为了应对其他分区的潜在的扩容需求，我们在 LVM VG 层面保留了 free PE</li>
          </ul>
        </dd>
        <dt>Rsync 服务器</dt>
        <dd>
          <ul>
            <li>2016 年底搭建</li>
            <li>至强 E5 v4 处理器（Broadwell）和 256 GB DDR4 内存</li>
            <li>12 块 6 TB HDD 和一些小容量 SSDs 用来装系统和当缓存</li>
            <li>组建了 ZFS RAID-Z3 阵列，大致分为 8 块数据盘 + 3 块校验盘，最后一块留作热备</li>
            <li>全默认参数（仅修改了 <code class="language-plaintext highlighter-rouge">zfs_arc_max</code>）</li>
          </ul>
        </dd>
      </dl>
      <p>这两台服务器的磁盘负载非常高，日常维持在 90% 以上，以至于即使从科大校园网内下载镜像，速度也很难达到 50 MB/s。
        显然对于镜像站这种专用于存储的用途来说，这样的性能表现是差强人意的。</p>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors-io-utilization-may-2024.png" class="image-popup" title="2024 年 5 月期间镜像站两台服务器的 I/O 负载
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors-io-utilization-may-2024.png" alt="2024 年 5 月期间镜像站两台服务器的 I/O 负载" /></a>
        <figcaption>
          2024 年 5 月期间镜像站两台服务器的 I/O 负载
        </figcaption>
      </figure>
      <h2 id="zfs">ZFS</h2>
      <p>ZFS 以“单机存储的终极解决方案”著称。
        它集 RAID、逻辑卷管理和文件系统于一体，具有包括快照、克隆、发送/接收等高级功能。
        ZFS 内的所有数据都有校验，可以在硬盘出现比特翻转等极端情况下尽可能确保文件系统的完整性。
        对于专用于存储的服务器来说，ZFS 看起来是个可以“一劳永逸”的解决方案，但当你看到它有如此多的可调节参数之后，你马上就不会这么想了。</p>
      <p>作为前期学习和实验，我在自己的工作站上增加了一批额外的硬盘并把它们组成了两个 ZFS pool，然后注册了一些 PT 站<s>开始刷流</s>来制造一些磁盘负载以便学习研究。
        在 PT 站的<s>刷流</s>成果十分可观：这个单机的 seed box 在两年半间产生了 1.20 PiB 的上传量。</p>
      <p>这两年刷 PT 站刷下来，我总结出来几个重要的 ZFS 学习资料来源：</p>
      <ul>
        <li>UToronto 的 Chris Siebenmann 的博客：<a href="https://utcc.utoronto.ca/~cks/space/blog/">https://utcc.utoronto.ca/~cks/space/blog/</a></li>
        <li>OpenZFS 的官方文档：<a href="https://openzfs.github.io/openzfs-docs/">https://openzfs.github.io/openzfs-docs/</a></li>
        <li>我自己攒出的一篇博客：<a href="https://ibug.io/p/62">Understanding ZFS block sizes</a>
          <ul>
            <li>以及这篇博客底部列出的参考文献</li>
          </ul>
        </li>
      </ul>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/2024-06-05.png" class="image-popup" title="学习 ZFS 过程中的副产物：一个为 qBittorrent 定制的 Grafana 面板（xs
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/2024-06-05.png" alt="一个为 qBittorrent 定制的 Grafana 面板" /></a>
        <figcaption>
          学习 ZFS 过程中的副产物：一个为 qBittorrent 定制的 Grafana 面板（xs
        </figcaption>
      </figure>
      <p>经过多年的 ZFS 学习，我意识到镜像站服务器上的配置其实有很大的优化空间，方法就是 all-in ZFS 并正确地调节一些参数。</p>
      <h2 id="镜像站">镜像站</h2>
      <p>在开工重建 ZFS pool 之前，我们需要正确地理解和分析镜像站的负载类型。简而言之，镜像站的特点是：</p>
      <ul>
        <li>提供文件下载服务</li>
        <li>
          <s>也（被迫）提供“家庭宽带上下行流量平衡服务”</s>
          <p>（人人喊打的 PCDN 需要为此负责）</p>
        </li>
        <li>读多写少，且大部分读取都是全文件顺序读取</li>
        <li>能够容忍少量的数据丢失，毕竟镜像内容可以轻易地从上游重新同步回来</li>
      </ul>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors-file-size-distribution-2024-08.png" class="image-popup" title="2024 年 8 月镜像站上的文件大小分布
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors-file-size-distribution-2024-08.png" alt="2024 年 8 月镜像站上的文件大小分布" /></a>
        <figcaption>
          2024 年 8 月镜像站上的文件大小分布
        </figcaption>
      </figure>
      <p>基于以上思考，我们分析了镜像站上存储的内容。从上图中可以看出，镜像站上总文件数超过 4000 万，其中一半的文件大小不到 10 KiB，并且 90% 的文件大小不到 1 MiB。
        尽管如此，所有文件的平均大小仍然达到了 1.6 MiB。</p>
      <h2 id="mirrors2">重建 Rsync 服务器</h2>
      <p>Rsync 服务器的流量较少，但磁盘使用率较为极端，加上我们认定 Rsync 服务的重要性较低，因此在今年 6 月，我们先动手重建了这台服务器。
        我们制定了如下的重建计划：</p>
      <ul>
        <li>首先，考虑到镜像站上一半的文件都不到 10 KiB（注意我们的磁盘的物理扇区大小是 4 KiB），RAID-Z3 的开销过高，因此我们决定将其重建为 RAID-Z2 并且拆成两组 vdev。这样做还有一个额外的好处，即期望情况下我们还可以在这个 ZFS pool 中获得两倍的 IOPS，毕竟文件的每个“块”只存储在一个 vdev 上。</li>
        <li>
          <p>然后我们仔细研究了如何为镜像站场景调优 ZFS dataset 参数：</p>
          <ul>
            <li><code class="language-plaintext highlighter-rouge">recordsize=1M</code>：尽可能优化顺序读写性能，同时减少碎片化</li>
            <li>
              <p><code class="language-plaintext highlighter-rouge">compression=zstd</code>：开点压缩来试试能节约多少磁盘空间</p>
              <ul>
                <li>
                  <p>OpenZFS 2.2 开始将 early-abort 机制引入了 Zstd 压缩算法（Zstd-3 以上的等级）。该机制会首先尝试使用 LZ4 和 Zstd-1 来压缩数据以便评估数据的可压缩性，如果数据不可压缩（熵太大），则不再尝试用设定的 Zstd 等级压缩，而是直接原样写入磁盘上，避免在不可压缩的数据上浪费 CPU。</p>
                  <p>我们已知镜像站上的大部分内容都是已经压缩过的，因此 early-abort 算是给我们兜了个底，让我们可以放心地开 Zstd。</p>
                </li>
              </ul>
            </li>
            <li><code class="language-plaintext highlighter-rouge">xattr=off</code>：镜像站上的文件不需要扩展属性</li>
            <li><code class="language-plaintext highlighter-rouge">atime=off</code>：镜像站上的文件不需要记录，也不需要更新 atime，可以省掉不少写入</li>
            <li><code class="language-plaintext highlighter-rouge">setuid=off</code>、<code class="language-plaintext highlighter-rouge">exec=off</code>、<code class="language-plaintext highlighter-rouge">devices=off</code> 也是我们不需要的挂载选项（也是一个更安全的做法）</li>
            <li><code class="language-plaintext highlighter-rouge">secondarycache=metadata</code> 让 L2ARC 仅缓存 ZFS 内部的元数据。这是因为 Rsync 服务器上的文件访问模式更加均匀，而不像面向终端用户的 HTTP 服务器上冷热分明，因此仅缓存元数据可以节约 SSD 寿命。</li>
          </ul>
        </li>
        <li>
          <p>以及一些可能有潜在（但我们认为我们可以容忍的）风险的选项：</p>
          <ul>
            <li><code class="language-plaintext highlighter-rouge">sync=disabled</code>：禁用同步写入语义（<code class="language-plaintext highlighter-rouge">open(O_SYNC)</code>、<code class="language-plaintext highlighter-rouge">sync()</code> 和 <code class="language-plaintext highlighter-rouge">fsync()</code> 等）以让 ZFS 能够充分发挥写缓冲区的意义，如降低碎片率等</li>
            <li><code class="language-plaintext highlighter-rouge">redundant_metadata=some</code>：（OpenZFS 2.2）减少元数据的冗余度来获得更好的写入性能。</li>
          </ul>
          <p>我们认为这两个选项符合我们对镜像站仓库内容的数据安全和完整性需求的理解，它们在其他场景下不一定“安全”。</p>
        </li>
        <li>
          <p>对于 ZFS 模块层面的参数，光是 290+ 的数量就已经很劝退了。
            此处感谢 Debian ZFS 维护者兼北京外国语大学镜像站管理员 @happyaron 的帮助，我们快速找出了十几个常用的参数进行针对性条件。</p>
          <div class="language-shell highlighter-rouge">
            <div class="highlight">
              <pre class="highlight"><code><span class="c"># 设置 ARC 大小范围为 160-200 GiB，并为操作系统保留 16 GiB 空闲</span>
options zfs <span class="nv">zfs_arc_max</span><span class="o">=</span>214748364800
options zfs <span class="nv">zfs_arc_min</span><span class="o">=</span>171798691840
options zfs <span class="nv">zfs_arc_sys_free</span><span class="o">=</span>17179869184

<span class="c"># 设置元数据对用户数据优先级的权重为 20x (OpenZFS 2.2+)</span>
options zfs <span class="nv">zfs_arc_meta_balance</span><span class="o">=</span>2000

<span class="c"># 允许 dnode 占用至多 80% 的 ARC 容量</span>
options zfs <span class="nv">zfs_arc_dnode_limit_percent</span><span class="o">=</span>80

<span class="c"># 以下几行参见 man page 中的 "ZFS I/O Scheduler" 一节</span>
options zfs <span class="nv">zfs_vdev_async_read_max_active</span><span class="o">=</span>8
options zfs <span class="nv">zfs_vdev_async_read_min_active</span><span class="o">=</span>2
options zfs <span class="nv">zfs_vdev_scrub_max_active</span><span class="o">=</span>5
options zfs <span class="nv">zfs_vdev_max_active</span><span class="o">=</span>20000

<span class="c"># 避免因内存压力降低 ARC 读写速度</span>
options zfs <span class="nv">zfs_arc_lotsfree_percent</span><span class="o">=</span>0

<span class="c"># L2ARC 参数</span>
options zfs <span class="nv">l2arc_headroom</span><span class="o">=</span>8
options zfs <span class="nv">l2arc_write_max</span><span class="o">=</span>67108864
options zfs <span class="nv">l2arc_noprefetch</span><span class="o">=</span>0
</code></pre>
            </div>
    </div>
          <p>另外还有 <code class="language-plaintext highlighter-rouge">zfs_dmu_offset_next_sync</code>，但由于它从 OpenZFS 2.1.5 开始已经默认启用了，因此我们将其从本列表中略去。</p>
        </li>
      </ul>
      <p>将 Rsync 服务暂时转移到由 HTTP 服务器兼任之后，我们 destroy 了原有的 ZFS pool 并重新组建了一个新的 pool，然后再从（上游或 TUNA、BFSU 等友校镜像站）外面把原有的仓库同步回来。
        令我们感到惊讶的是，把总共近 40 TiB 的仓库同步回来只花了 3 天，比我们预想的要快得多。
        其他的一些数据看起来也令人振奋：</p>
      <ul>
        <li>
          <p>ZFS 压缩率：39.5T / 37.1T (1.07x)</p>
          <p>需要特别指出的是，ZFS 只显示压缩率小数点后两位，所以更高的精度，需要通过原始数据自己计算：</p>
          <div class="language-shell highlighter-rouge">
            <div class="highlight">
              <pre class="highlight"><code>zfs list <span class="nt">-po</span> name,logicalused,used
</code></pre>
            </div>
    </div>
          <p>我们更精确的压缩率是 1 + 6.57%，即压掉了 2.67 TB（2.43 TiB），约等于 <a href="/static/planet/ustc-mirrors-zfs-rebuild/lenovo-legion-wechat-data.jpg">9 份微信数据</a>（不是</p>
        </li>
        <li>
          <p>最关键的是更合理的 I/O 负载：</p>
          <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-io-utilization-and-free-space-june-july-2024.png" class="image-popup" title="mirrors2 机器在重建前后的 I/O 负载
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-io-utilization-and-free-space-june-july-2024.png" alt="mirrors2 机器在重建前后的 I/O 负载" /></a>
            <figcaption>
              mirrors2 机器在重建前后的 I/O 负载
            </figcaption>
          </figure>
        </li>
      </ul>
      <p>可以看出，经过几天的预热之后，I/O 负载维持在了 20% 左右，而在重建之前一直维持在 90% 以上。</p>
      <h2 id="mirrors4">重建 HTTP 服务器</h2>
      <p>我们的 HTTP 服务器是在 2020 年秋季搭建的，并且当时也有一些不同的背景。
        申请这台服务器正是因为 Rsync 服务器容量过满且性能不佳，加上当时也没有了解 ZFS 的同学，我们对 ZFS 的印象很差，所以我们决定完全避开 ZFS，使用硬件 RAID、LVM 和 XFS，其中使用 LVM 的原因是 RAID 卡不支持跨两个控制器组 RAID。
        对于“内存做缓存”这部分，我们决定直接使用内核的 page cache；而对于 SSD 缓存，我们则率先吃了 LVMcache 的螃蟹。</p>
      <p>然而这些过于“新鲜”的技术并没有带来比（现在的 ZFS）更好的体验：</p>
      <ul>
        <li>XFS 无法缩小，因此我们不得不在 LVM VG 层面保留了 free PE。同时我们也不能把 XFS 文件系统用满，因此这里就有了两层无法利用的空闲空间。</li>
        <li>我们最初分配了 1.5 TB 的 SSD 缓存，但 LVMcache 又建议我们不要超过 100 万个 chunk，我们当时也没有足够的精力和知识水平去研究这个建议背后的技术细节，因此我们最终只分配了 1 TiB（1 MiB chunk size * 1 Mi chunks）的 SSD 缓存。</li>
        <li>SSD 缓存策略不可调，多年以后我们翻了 kernel 源码才发现它是一个 64 级的 LRU。</li>
        <li>配好 cache 之后 GRUB 首先挂了（囧），我们调查发现原因是 GRUB 有一套自己的解析 LVM metadata 的代码，它并没有正确处理（或者说根本没处理）VG 中有 cache volume 的情况，我们不得不自己 <a href="https://github.com/taoky/grub/commit/85b260baec91aa4f7db85d7592f6be92d549a0ae">patch</a> 了 GRUB 才能正常开机。</li>
        <li>由于我们对 LVMcache 的 chunk 不够了解，我们的 SSD 在不到 2 年的时间里就严重超过了写入寿命，我们被迫申请换新。</li>
      </ul>
      <p>在 SSD 换新之后，即使我们认为我们对 LVMcache 做出了稍微合理一点的调参，坚持忽略警告采用 128 KiB 的 chunk size 和 800 万个 chunk 之后，它的性能（命中率）也并不可观：</p>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors4-dmcache-may-june-2024.png" class="image-popup" title="2024 年 5 月至 6 月期间 LVMcache 的命中率
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors4-dmcache-may-june-2024.png" alt="2024 年 5 月至 6 月期间 LVMcache 的命中率" /></a>
        <figcaption>
          2024 年 5 月至 6 月期间 LVMcache 的命中率
        </figcaption>
      </figure>
      <p>这些年来我们已经受够了 LVMcache 的坑了，加上 Rsync 服务器重建的巨大成功，我们重新开始相信 ZFS 是天下第一的存储方案了。所以一个月之后，我们又制定了一个相似的重建计划准备重建 HTTP 服务器，但是有一些微小的差别：</p>
      <ul>
        <li>我们的 Rsync 服务器采用原生的 Debian kernel + <code class="language-plaintext highlighter-rouge">zfs-dkms</code>，但根据我们使用 PVE 的经验，我们准备在 HTTP 服务器上直接用 <code class="language-plaintext highlighter-rouge">6.8.8-3-pve</code> kernel，它打包了 <code class="language-plaintext highlighter-rouge">zfs.ko</code>，这样我们就不用在 DKMS 上浪费时间了。</li>
        <li>由于磁盘数目相同（12 块），我们也采用了两个 6 盘 RAID-Z2 vdev 的组合。
          <ul>
            <li>考虑到这台服务器直接向用户提供 HTTP 服务，磁盘的访问模式会比 Rsync 服务器更加热冷分明，因此我们保持了 <code class="language-plaintext highlighter-rouge">secondarycache=all</code> 的设置（采用默认值，不动）。</li>
            <li>这台新服务器的 CPU 更新更好，因此我们把压缩等级提高到了 <code class="language-plaintext highlighter-rouge">zstd-8</code> 来试试有没有更好的压缩比。</li>
          </ul>
        </li>
        <li>我们在 Rsync 服务器上已经有了一个完整的、经过 ZFS 优化过的仓库，因此我们可以直接用 <code class="language-plaintext highlighter-rouge">zfs send -Lcp</code> 把数据倒过来。我们最终只花了 36 小时就把超过 50 TiB 的数据都倒回来了。</li>
        <li>由于两台服务器上存储的镜像仓库有所不同，HTTP 服务器上的压缩比略低一些，为 1 + 3.93%（压掉了 2.42 TiB / 2.20 TiB）。</li>
      </ul>
      <p>我们把两台服务器的 I/O 负载放在一张图里对比：</p>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-io-utilization-june-july-2024.png" class="image-popup" title="镜像站两台服务器在重建前后的 I/O 负载
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-io-utilization-june-july-2024.png" alt="镜像站两台服务器在重建前后的 I/O 负载" /></a>
        <figcaption>
          镜像站两台服务器在重建前后的 I/O 负载
        </figcaption>
      </figure>
      <p>上图左半部分为重建前的情况，中间部分为仅重建了 Rsync 服务器的情况，右半部分为两台服务器都重建完毕后的情况。</p>
      <p>ZFS ARC 的命中率也十分可观：</p>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-zfs-arc-hit-rate.png" class="image-popup" title="两台服务器的 ZFS ARC 命中率
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-zfs-arc-hit-rate.png" alt="两台服务器的 ZFS ARC 命中率" /></a>
        <figcaption>
          两台服务器的 ZFS ARC 命中率
        </figcaption>
      </figure>
      <p>稳定下来之后，两台服务器的 I/O 负载还更低了：</p>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-disk-io-after-rebuild.png" class="image-popup" title="两台服务器重建后磁盘 I/O 的稳定情况
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-disk-io-after-rebuild.png" alt="两台服务器重建后磁盘 I/O 的稳定情况" /></a>
        <figcaption>
          两台服务器重建后磁盘 I/O 的稳定情况
        </figcaption>
      </figure>
      <h2 id="杂项">杂项</h2>
      <h3 id="zfs-透明压缩">ZFS 透明压缩</h3>
      <p>我们并没有想到这么多仓库的压缩率都还不错：</p>
      <table>
        <thead>
          <tr>
            <th style="text-align: left">NAME</th>
            <th style="text-align: right">LUSED</th>
            <th style="text-align: right">USED</th>
            <th style="text-align: right">RATIO</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="text-align: left">pool0/repo/crates.io-index</td>
            <td style="text-align: right">2.19G</td>
            <td style="text-align: right">1.65G</td>
            <td style="text-align: right">3.01x</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/elpa</td>
            <td style="text-align: right">3.35G</td>
            <td style="text-align: right">2.32G</td>
            <td style="text-align: right">1.67x</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/rfc</td>
            <td style="text-align: right">4.37G</td>
            <td style="text-align: right">3.01G</td>
            <td style="text-align: right">1.56x</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/debian-cdimage</td>
            <td style="text-align: right">1.58T</td>
            <td style="text-align: right">1.04T</td>
            <td style="text-align: right">1.54x</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/tldp</td>
            <td style="text-align: right">4.89G</td>
            <td style="text-align: right">3.78G</td>
            <td style="text-align: right">1.48x</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/loongnix</td>
            <td style="text-align: right">438G</td>
            <td style="text-align: right">332G</td>
            <td style="text-align: right">1.34x</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/rosdistro</td>
            <td style="text-align: right">32.2M</td>
            <td style="text-align: right">26.6M</td>
            <td style="text-align: right">1.31x</td>
          </tr>
        </tbody>
      </table>
      <p>有些数字看着不太对劲（比如第一个），我们认为是这个问题造成的：<a href="https://github.com/openzfs/zfs/issues/7639"><i class="fab fa-github"></i> openzfs/zfs#7639</a></p>
      <p>如果我们按照压缩量排序，结果如下：</p>
      <table>
        <thead>
          <tr>
            <th style="text-align: left">NAME</th>
            <th style="text-align: right">LUSED</th>
            <th style="text-align: right">USED</th>
            <th style="text-align: right">DIFF</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="text-align: left">pool0/repo</td>
            <td style="text-align: right">58.3T</td>
            <td style="text-align: right">56.1T</td>
            <td style="text-align: right">2.2T</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/debian-cdimage</td>
            <td style="text-align: right">1.6T</td>
            <td style="text-align: right">1.0T</td>
            <td style="text-align: right">549.6G</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/opensuse</td>
            <td style="text-align: right">2.5T</td>
            <td style="text-align: right">2.3T</td>
            <td style="text-align: right">279.7G</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/turnkeylinux</td>
            <td style="text-align: right">1.2T</td>
            <td style="text-align: right">1.0T</td>
            <td style="text-align: right">155.2G</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/loongnix</td>
            <td style="text-align: right">438.2G</td>
            <td style="text-align: right">331.9G</td>
            <td style="text-align: right">106.3G</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/alpine</td>
            <td style="text-align: right">3.0T</td>
            <td style="text-align: right">2.9T</td>
            <td style="text-align: right">103.9G</td>
          </tr>
          <tr>
            <td style="text-align: left">pool0/repo/openwrt</td>
            <td style="text-align: right">1.8T</td>
            <td style="text-align: right">1.7T</td>
            <td style="text-align: right">70.0G</td>
          </tr>
        </tbody>
      </table>
      <p><code class="language-plaintext highlighter-rouge">debian-cdimage</code> 一个仓库就占了总压缩量的 1/4。</p>
      <h3 id="grafana-for-zfs-io">Grafana for ZFS I/O</h3>
      <p>重建后，我们也修了一个显示 ZFS I/O 的 Grafana 面板。
        因为 ZFS 的 I/O 统计数据是通过 <code class="language-plaintext highlighter-rouge">/proc/spl/kstat/zfs/$POOL/objset-$OBJSETID_HEX</code> 获取的，并且是分“object set”（即 dataset）累计统计的，所以我们需要先对每个 dataset 的数据做差分，再按 pool 加起来。
        也就是说，一个 InfluxQL subquery 是跑不掉的的。</p>
      <div class="language-sql highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><span class="k">SELECT</span>
  <span class="n">non_negative_derivative</span><span class="p">(</span><span class="k">sum</span><span class="p">(</span><span class="nv">"reads"</span><span class="p">),</span> <span class="mi">1</span><span class="n">s</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">"read"</span><span class="p">,</span>
  <span class="n">non_negative_derivative</span><span class="p">(</span><span class="k">sum</span><span class="p">(</span><span class="nv">"writes"</span><span class="p">),</span> <span class="mi">1</span><span class="n">s</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">"write"</span>
<span class="k">FROM</span> <span class="p">(</span>
  <span class="k">SELECT</span>
    <span class="k">first</span><span class="p">(</span><span class="nv">"reads"</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">"reads"</span><span class="p">,</span>
    <span class="k">first</span><span class="p">(</span><span class="nv">"writes"</span><span class="p">)</span> <span class="k">AS</span> <span class="nv">"writes"</span>
  <span class="k">FROM</span> <span class="nv">"zfs_pool"</span>
  <span class="k">WHERE</span> <span class="p">(</span><span class="nv">"host"</span> <span class="o">=</span> <span class="s1">'taokystrong'</span> <span class="k">AND</span> <span class="nv">"pool"</span> <span class="o">=</span> <span class="s1">'pool0'</span><span class="p">)</span> <span class="k">AND</span> <span class="err">$</span><span class="n">timeFilter</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="nb">time</span><span class="p">(</span><span class="err">$</span><span class="n">interval</span><span class="p">),</span> <span class="nv">"host"</span><span class="p">::</span><span class="n">tag</span><span class="p">,</span> <span class="nv">"pool"</span><span class="p">::</span><span class="n">tag</span><span class="p">,</span> <span class="nv">"dataset"</span><span class="p">::</span><span class="n">tag</span> <span class="n">fill</span><span class="p">(</span><span class="k">null</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">WHERE</span> <span class="err">$</span><span class="n">timeFilter</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="nb">time</span><span class="p">(</span><span class="err">$</span><span class="n">interval</span><span class="p">),</span> <span class="nv">"pool"</span><span class="p">::</span><span class="n">tag</span> <span class="n">fill</span><span class="p">(</span><span class="n">linear</span><span class="p">)</span>
</code></pre>
        </div>
      </div>
      <p>由于 subquery 的存在，这个 query 确实有点慢，但我们也没啥能优化的。</p>
      <p>如果要显示读写速率的话，直接把内层查询的 <code class="language-plaintext highlighter-rouge">reads</code> 和 <code class="language-plaintext highlighter-rouge">writes</code> 换成 <code class="language-plaintext highlighter-rouge">nread</code> 和 <code class="language-plaintext highlighter-rouge">nwritten</code> 就行了。</p>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-zfs-io-count.png" class="image-popup" title="ZFS IOPS 和带宽
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/mirrors2-4-zfs-io-count.png" alt="ZFS IOPS 和带宽" /></a>
        <figcaption>
          ZFS IOPS 和带宽
        </figcaption>
      </figure>
      <p>令 UC 震惊部出动的是，一个机械盘阵列竟然能跑出平均 15k、最高 50k 的 IOPS。
        我们发现这个统计数字算上了 ARC hit，也就是只有一小部分 I/O 请求是真正落盘的，那就好解释了。</p>
      <h3 id="apparmor">AppArmor</h3>
      <p>换上先进的 PVE kernel 之后，我们很快就发现同步任务全挂了（）
        排查发现 <code class="language-plaintext highlighter-rouge">rsync</code> 在调用 <code class="language-plaintext highlighter-rouge">socketpair(2)</code> 的时候冒出了 <code class="language-plaintext highlighter-rouge">EPERM</code>，这是我们从来没遇到过的情况。
        实际上这些系统调用都被 AppArmor 拦下来了，最终查到是 Ubuntu 在 kernel 里加的私货 <code class="language-plaintext highlighter-rouge">security/apparmor/af_unix.c</code> 导致的。
        由于 Proxmox VE 的 kernel 是从 Ubuntu fork 过来的，这个私货也就跑到我们服务器上了。</p>
      <p>我们发现 PVE 也打包了自己的 AppArmor <code class="language-plaintext highlighter-rouge">features</code> 配置，我们就把它直接拉过来用：</p>
      <div class="language-shell highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code>dpkg-divert <span class="nt">--package</span> lxc-pve <span class="nt">--rename</span> <span class="nt">--divert</span> /usr/share/apparmor-features/features.stock <span class="nt">--add</span> /usr/share/apparmor-features/features
wget <span class="nt">-O</span> /usr/share/apparmor-features/features https://github.com/proxmox/lxc/raw/master/debian/features
</code></pre>
        </div>
      </div>
      <h3 id="file-deduplication">文件级去重</h3>
      <p>我们发现个别仓库有大量的重复的、内容相同的目录，我们怀疑可能是同步方法（HTTP）的限制导致目录的符号链接变成了完整内容的拷贝。</p>
      <figure class=""><a href="/static/planet/ustc-mirrors-zfs-rebuild/ls-zerotier-redhat-el.png" class="image-popup" title="ZeroTier 仓库中的一些目录
"><img src="/static/planet/ustc-mirrors-zfs-rebuild/ls-zerotier-redhat-el.png" alt="ZeroTier 仓库中的一些目录" /></a>
        <figcaption>
          ZeroTier 仓库中的一些目录
        </figcaption>
      </figure>
      <p>我们想到了 ZFS 的 deduplication，于是我们在 ZeroTier 仓库上做了一个初步的测试：</p>
      <div class="language-shell highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code>zfs create <span class="nt">-o</span> <span class="nv">dedup</span><span class="o">=</span>on pool0/repo/zerotier
<span class="c"># 导入数据</span>
</code></pre>
        </div>
      </div>
      <div class="language-console highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>zdb <span class="nt">-DDD</span> pool0
<span class="go">dedup = 4.93, compress = 1.23, copies = 1.00, dedup * compress / copies = 6.04
</span></code></pre>
        </div>
      </div>
      <p>结果十分可观，但考虑到 ZFS dedup 一向来糟糕的名声，我们还是不太想在镜像站上启用。
        所以我们重新找了个更灵车的方案：</p>
      <div class="language-shell highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><span class="c"># post-sync.sh</span>
<span class="c"># Do file-level deduplication for select repos</span>
<span class="k">case</span> <span class="s2">"</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="k">in
  </span>docker-ce|influxdata|nginx|openresty|proxmox|salt|tailscale|zerotier<span class="p">)</span>
    jdupes <span class="nt">-L</span> <span class="nt">-Q</span> <span class="nt">-r</span> <span class="nt">-q</span> <span class="s2">"</span><span class="nv">$DIR</span><span class="s2">"</span> <span class="p">;;</span>
<span class="k">esac</span>
</code></pre>
        </div>
      </div>
      <p>这个用户态的文件去重工具十分好用，效果堪比 ZFS，而且没有性能损失。
        我们对几个明显有重复内容的仓库跑了一下 jdupes，结果如下：</p>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Orig</th>
            <th>Dedup</th>
            <th>Diff</th>
            <th>Ratio</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>proxmox</td>
            <td>395.4G</td>
            <td>162.6G</td>
            <td>232.9G</td>
            <td>2.43x</td>
          </tr>
          <tr>
            <td>docker-ce</td>
            <td>539.6G</td>
            <td>318.2G</td>
            <td>221.4G</td>
            <td>1.70x</td>
          </tr>
          <tr>
            <td>influxdata</td>
            <td>248.4G</td>
            <td>54.8G</td>
            <td>193.6G</td>
            <td>4.54x</td>
          </tr>
          <tr>
            <td>salt</td>
            <td>139.0G</td>
            <td>87.2G</td>
            <td>51.9G</td>
            <td>1.59x</td>
          </tr>
          <tr>
            <td>nginx</td>
            <td>94.9G</td>
            <td>59.7G</td>
            <td>35.2G</td>
            <td>1.59x</td>
          </tr>
          <tr>
            <td>zerotier</td>
            <td>29.8G</td>
            <td>6.1G</td>
            <td>23.7G</td>
            <td>4.88x</td>
          </tr>
          <tr>
            <td>mysql-repo</td>
            <td>647.8G</td>
            <td>632.5G</td>
            <td>15.2G</td>
            <td>1.02x</td>
          </tr>
          <tr>
            <td>openresty</td>
            <td>65.1G</td>
            <td>53.4G</td>
            <td>11.7G</td>
            <td>1.22x</td>
          </tr>
          <tr>
            <td>tailscale</td>
            <td>17.9G</td>
            <td>9.0G</td>
            <td>9.0G</td>
            <td>2.00x</td>
          </tr>
        </tbody>
      </table>
      <p>参考上述表格，我们排除了 <code class="language-plaintext highlighter-rouge">mysql-repo</code>，因为它的去重比例太低，不值得花费跑一遍去重产生的 I/O 负载。</p>
      <h2 id="conclusion">总结</h2>
      <p>ZFS 解决了我们镜像站上的一大堆问题，并且有了此次调参经验，我们现在宣布 <strong>ZFS 天下第一</strong>（不是）</p>
      <p>有了 ZFS 之后：</p>
      <ul>
        <li>我们不再担心分区问题，ZFS 可以灵活分配。</li>
        <li>我们的机械盘比别人的固态盘跑得还快，这非常 excited！
          <ul>
            <li>我们成为了第一个不再<strong>羡慕</strong> TUNA 的全闪服务器的镜像站！</li>
          </ul>
        </li>
        <li>免费获得额外容量，由 ZFS 透明压缩和去重联合赞助！</li>
      </ul>
      <h3 id="considerations">思考</h3>
      <p>虽然我们的 ZFS 配置看起来非常高效，但我们也知道 ZFS 在长期运行中可能会因为碎片化而导致性能下降的问题。
        我们会持续关注我们的服务器，监控长期的性能变化。</p>
      ]]></content><author><name>iBug</name></author><category term="mirrors" /><category term="linux" /><category term="服务器" /><category term="zfs" /><summary type="html"><![CDATA[A.K.A. 如何让 2000 元的机械硬盘跑得比 3000 元的固态硬盘还快（]]></summary></entry><entry><title type="html">Slidev 幻灯片制作</title><link href="https://lug.ustc.edu.cn/news/2024/12/slidev/" rel="alternate" type="text/html" title="Slidev 幻灯片制作" /><published>2024-12-04T15:00:00+08:00</published><updated>2024-12-20T20:50:29+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/12/slidev</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/12/slidev/"><![CDATA[<p>2024 年 12 月 4 日，校学生 Linux 用户协会在西区第三教学楼 3A306 教室举行小聚。本次小聚是由 Slidev 团队成员 _Kerman 同学带来的 Slidev 幻灯片制作工具介绍。Slidev.js 是一款为开发者设计的开源的幻灯片制作工具，通过简单的 Markdown 语法即可制作出精美的幻灯片，在此基础上也很方便添加交互式的内容、添加动画效果等。它非常适合用于学术报告、技术分享、演讲等场景。</p>
    <p>_Kerman 同学首先向大家介绍了 Slidev 的基本使用方法，包括如何安装、创建项目、添加内容等。他随后演示了如何通过 Markdown 语法添加文本、图片、代码块、表格等内容及一些高级功能，例如添加动画、如何添加交互式的内容等。最后，他还向大家展示了如何将制作好的幻灯片导出为 PDF 文件。在现场，许多同学尝试了 Slidev，创建了自己的第一个 Slidev 幻灯片项目。</p>
    <p>小聚的最后，_Kerman 同学分享了他自己参与相关开源社区的感受，并推荐大家多参与开源社区。本次小聚的幻灯片可以在 <a href="https://ftp.lug.ustc.edu.cn/活动/2024.12.04_Slidev_小聚/slides/">LUG FTP</a> 查看。</p>
    ]]></content><author><name>tiankaima</name></author><category term="LUG 活动" /><category term="LUG 小聚" /><summary type="html"><![CDATA[2024 年 12 月 4 日，校学生 Linux 用户协会在西区第三教学楼 3A306 教室举行小聚。本次小聚是由 Slidev 团队成员 _Kerman 同学带来的 Slidev 幻灯片制作工具介绍。Slidev.js 是一款为开发者设计的开源的幻灯片制作工具，通过简单的 Markdown 语法即可制作出精美的幻灯片，在此基础上也很方便添加交互式的内容、添加动画效果等。它非常适合用于学术报告、技术分享、演讲等场景。]]></summary></entry><entry><title type="html">C/C++ 下 OpenMP 程序设计介绍</title><link href="https://lug.ustc.edu.cn/news/2024/11/gathering-openmp/" rel="alternate" type="text/html" title="C/C++ 下 OpenMP 程序设计介绍" /><published>2024-11-29T10:00:00+08:00</published><updated>2024-12-03T11:21:41+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/11/gathering-openmp</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/11/gathering-openmp/"><![CDATA[<p>2024 年 11 月 27 日，校学生 Linux 用户协会在西区第三教学楼 3A306 教室开展了小聚活动。本次小聚主要是由罗嘉宏同学带来的 C/C++ 下 OpenMP 程序设计介绍。<a href="https://www.openmp.org/">OpenMP</a> 是广为运用的并行计算处理框架，为 C/C++ 和 Fortran 编程语言提供支持，提供了简单有效的 CPU 并行处理能力。此外，新版本的 OpenMP 还支持 GPU 计算等功能。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.11.27_%E5%B0%8F%E8%81%9A/2.jpg" alt="" /></p>
  <p>小聚过程中，罗嘉宏同学展示了由简单到复杂的一系列 OpenMP 代码示例（使用 C 语言编写），以此对 OpenMP 计算框架的基本用法作出解释说明。这些代码段覆盖了从最简单的 <code class="language-plaintext highlighter-rouge">parallel</code> 到原子操作等等的主题，并现场展示了运行结果。这使同学们对并行计算中出现的一些问题和相关的解决方式有了初步的认识，也为同学们今后可能会遇到的需要并行计算的问题提供了入门性的解决方式。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.11.27_%E5%B0%8F%E8%81%9A/4.jpg" alt="" /></p>
  <p>值得一提的是，本次小聚使用了 Lichee Pi 4A 作为现场演示设备。该设备上有 RISC-V64 架构的 4 个处理器核心。在活动过程中，该设备状态稳定，展示出了较高的 OpenMP 多线程并行效率。本次小聚使用的案例代码可以在 <a href="https://git.lug.ustc.edu.cn/luojh/ompguide">LUG GitLab</a> 上获取。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.11.27_%E5%B0%8F%E8%81%9A/1.jpg" alt="" /></p>
  ]]></content><author><name>tiankaima</name></author><category term="LUG 活动" /><category term="LUG 小聚" /><summary type="html"><![CDATA[2024 年 11 月 27 日，校学生 Linux 用户协会在西区第三教学楼 3A306 教室开展了小聚活动。本次小聚主要是由罗嘉宏同学带来的 C/C++ 下 OpenMP 程序设计介绍。OpenMP 是广为运用的并行计算处理框架，为 C/C++ 和 Fortran 编程语言提供支持，提供了简单有效的 CPU 并行处理能力。此外，新版本的 OpenMP 还支持 GPU 计算等功能。]]></summary></entry><entry><title type="html">Hackergame 2024 活动安排</title><link href="https://lug.ustc.edu.cn/news/2024/10/Hackergame2024-ad/" rel="alternate" type="text/html" title="Hackergame 2024 活动安排" /><published>2024-10-26T00:00:00+08:00</published><updated>2024-10-31T08:54:10+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/10/Hackergame2024-ad</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/10/Hackergame2024-ad/"><![CDATA[<p>2024 年度中国科学技术大学第十一届信息安全大赛（Hackergame 2024）即将于 <strong>2024.11.02</strong> 线上举办，持续一周，下面是详细的活动安排。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.11.02_Hackergame_2024/%E6%B4%BB%E5%8A%A8%E5%AE%89%E6%8E%92%E7%94%BB%E6%9D%BF%201-100.jpg" alt="" /></p>
  <h2 id="比赛内容">比赛内容</h2>
  <p>本次比赛题目共分为五类：<u>综合技能</u>、<u>程序逆向与漏洞利用</u>、<u>密码学与数学</u>、<u>网站安全</u> 以及 <u>人工智能</u>。</p>
  <p>和往届比赛一样，我们注重对新手循序渐进的引导，通过对题目的难度梯度设计，让大家都能感受到信息安全的乐趣，学到信息安全的知识。欢迎大家积极参与，预祝取得满意的成绩！</p>
  <p>更多介绍详见：<a href="https://lug.ustc.edu.cn/wiki/lug/events/hackergame/">https://lug.ustc.edu.cn/wiki/lug/events/hackergame/</a></p>
  <h2 id="时间安排">时间安排</h2>
  <p>北京时间 2024.11.02（周六）12:00 - 2024.11.09（周六）12:00</p>
  <p>活动日历：<a href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.11.02_Hackergame_2024/hackergame2024.ics">hackergame2024.ics</a></p>
  <h2 id="比赛形式">比赛形式</h2>
  <p>线上举行，比赛地址：<a href="https://hack.lug.ustc.edu.cn">https://hack.lug.ustc.edu.cn</a></p>
  <p><u>比赛结束之前均可参赛</u></p>
  <h2 id="比赛交流">比赛交流</h2>
  <ul>
    <li>Hackergame 2024: <u>392057840</u></li>
    <li>Hackergame 2024 合作高校：<u>333979315</u></li>
  </ul>
  <h2 id="赛前动员会">赛前动员会</h2>
  <p>我们将于正式比赛开始前一天举办赛前动员会。动员会上，我们会介绍比赛的注意事项、参赛指南以及一些信息安全技巧。欢迎同学们参加！</p>
  <ul>
    <li>线下：<u>11.01 19:30 ~ 21:30</u> 西区 3C101</li>
    <li>线上：另行通知</li>
  </ul>
  <h2 id="奖项设置">奖项设置</h2>
  <p>比赛结束后组委根据最终得分排名，评出以下奖项以颁发证书和奖品：</p>
  <ul>
    <li>一等奖（一名）</li>
    <li>二等奖（五名）</li>
    <li>三等奖（二十五名）</li>
    <li>新生特别奖（两名，仅限大一新生）</li>
    <li>一血奖（每道题目一名，只颁发证书，不送出奖品）</li>
    <li>分类奖项（5 个分类，每个分类一名，只颁发证书，不送出奖品）</li>
  </ul>
  <p>注意：</p>
  <ul>
    <li>得分相同的以时间早优先</li>
    <li>若同时获得多个奖项（如一等奖和新生特别奖），奖品任选其一</li>
    <li>仅限校内在读学生，协办单位的奖项设置由相关单位决定</li>
  </ul>
  <h2 id="协办单位">协办单位</h2>
  <p>自第四届起，Hackergame 就邀请其他高校的同学一起同台竞技。往届比赛参加人数接近 4000 人，本届 Hackergame 我们同样邀请到了以下协办单位（排名不分先后）：</p>
  <ul>
    <li>复旦大学六星战队</li>
    <li>广东海洋大学 Hor1zon 战队</li>
    <li>哈尔滨工业大学 Linux 开源学生俱乐部</li>
    <li>哈尔滨工业大学紫丁香 CTF 俱乐部</li>
    <li>南京航空航天大学 Asuri 战队</li>
    <li>吉林大学 Linux 用户协会</li>
    <li>吉林大学 Spirit 战队</li>
    <li>东北大学 NEX 信息安全创新团队</li>
    <li>南方科技大学计算机研究协会</li>
    <li>南方科技大学 COMPASS 实验室</li>
    <li>中山大学 W4terDr0p 战队</li>
    <li>中山大学互联网与开源技术协会</li>
    <li>同济大学 CatTrainingForce 战队</li>
    <li>西安电子科技大学信息安全协会</li>
    <li>厦门理工学院信息安全协会</li>
    <li>浙江大学 AAA 战队</li>
    <li>上海大学开源社区</li>
    <li>南阳理工学院计算机与信息化处理协会</li>
    <li>上海交通大学 0ops 战队</li>
  </ul>
  <h2 id="宣传海报">宣传海报</h2>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.11.02_Hackergame_2024/Rev.20%E5%B1%95%E6%9E%B6.png" alt="" /></p>
  ]]></content><author><name>tiankaima</name></author><category term="LUG 活动" /><summary type="html"><![CDATA[2024 年度中国科学技术大学第十一届信息安全大赛（Hackergame 2024）即将于 2024.11.02 线上举办，持续一周，下面是详细的活动安排。]]></summary></entry><entry><title type="html">2024 软件自由日中国科大站</title><link href="https://lug.ustc.edu.cn/news/2024/09/SFD/" rel="alternate" type="text/html" title="2024 软件自由日中国科大站" /><published>2024-09-21T20:00:00+08:00</published><updated>2024-09-23T22:05:40+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/09/SFD</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/09/SFD/"><![CDATA[<p>2024 年 9 月 21 日，LUG 举办了软件自由日 (Software Freedom Day), 活动在 14:30-18:30 于西区 3C101 举行，并同步进行了线上直播。本次活动邀请到网络信息中心的张焕杰老师、本届 LUG 的 COO 马天开同学，PLCT 实验室的于波同学，以及 <code class="language-plaintext highlighter-rouge">traceexec</code> 的开发者任鹏飞同学。</p>
  <p>14 时 30 分，校学生 Linux 用户协会会长罗嘉宏同学简洁地介绍了活动流程安排和演讲嘉宾后，软件自由日活动正式开始。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/imgs/1.png" alt="" /></p>
  <p>首先，来自网络信息中心的张老师为我们简单介绍了目前校园内 5G 双域专网的建设情况，并分享了背后的技术细节。在演讲的结尾，他邀请在场的同学参与到 5G 专网的体验中来，并解答了同学们的问题。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/imgs/6.png" alt="" /></p>
  <p>接下来，本届 LUG 的 COO 马天开同学为我们简单介绍了一下一门新型的排版语言 Typst, 他通过与 LaTeX、Markdown 等同学们已经熟悉的排版语言的对比，讲述了 Typst 的优势和特点。他表示 Typst 的目标是成为一门更加易用、更加强大的排版语言，希望同学们能够尝试使用 Typst 来排版自己的文档。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/imgs/2.jpg" alt="" /></p>
  <p>在此之后，来自 PLCT 的于波同学为我们详细分享了他是怎样一步步成为 Debian Maintainer 及 Debian Developer 的，他分享了自己修复软件包时一些常见的流程和技巧，Debian Teams 的工作方式，以及他在 Debian 社区中的一些经历。他鼓励同学们积极参与到 Debian 社区中来，做出自己的一份贡献。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/imgs/7.png" alt="" /></p>
  <p>在短暂的茶歇过后，<code class="language-plaintext highlighter-rouge">traceexec</code> 的开发者、网络安全学院的任鹏飞同学为我们介绍了他的项目 <code class="language-plaintext highlighter-rouge">traceexec</code>。<code class="language-plaintext highlighter-rouge">traceexec</code> 是一个用于追踪程序执行的工具，它可以记录程序的执行过程，帮助开发者更好地理解程序的运行情况。任同学通过实际的例子向同学们展示了 <code class="language-plaintext highlighter-rouge">traceexec</code> 的使用方法，并横向对比了 <code class="language-plaintext highlighter-rouge">strace</code> 和 <code class="language-plaintext highlighter-rouge">ptrace</code> 等工具，并介绍了他目前编写的 eBPF 相关的工作。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/imgs/8.png" alt="" />
    <img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/imgs/9.png" alt="" /></p>
  <p>在这之后，闪电演讲拉开帷幕，三位同学分别上台介绍了他们在 LibrePlanet、使用 Julia、以及维护 <code class="language-plaintext highlighter-rouge">slidev.js</code> 的经历，感谢他们的分享。</p>
  <p>18 时 30 分，2024 年的软件自由日活动完满结束。活动中大家积极交流分享，我们希望通过这样的形式，让更多的同学了解到开源社区的魅力。</p>
  <blockquote>
    <p>每年的 SFD 活动都在 9 月的第三个周六举行，历年活动在 <a href="/wiki/lug/events/sfd">这里</a> 查看，如果您有意向在下一届的 SFD 活动中分享您的经验，欢迎 <a href="/wiki/lug/contact">联系我们</a>。</p>
    <p>本次活动录像、照片等资料已经上传 LUG FTP: <a href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/">https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.9.21_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/</a></p>
  </blockquote>
  ]]></content><author><name>tiankaima</name></author><category term="LUG 活动" /><summary type="html"><![CDATA[2024 年 9 月 21 日，LUG 举办了软件自由日 (Software Freedom Day), 活动在 14:30-18:30 于西区 3C101 举行，并同步进行了线上直播。本次活动邀请到网络信息中心的张焕杰老师、本届 LUG 的 COO 马天开同学，PLCT 实验室的于波同学，以及 traceexec 的开发者任鹏飞同学。]]></summary></entry><entry><title type="html">2024 秋季学期 新生活力课堂 &amp;amp; 游园会</title><link href="https://lug.ustc.edu.cn/news/2024/09/2024-freshmen-course/" rel="alternate" type="text/html" title="2024 秋季学期 新生活力课堂 &amp;amp; 游园会" /><published>2024-09-07T18:00:00+08:00</published><updated>2024-09-13T15:42:44+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/09/2024-freshmen-course</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/09/2024-freshmen-course/"><![CDATA[<p>中国科学技术大学 Linux 用户协会在秋季学期举办了系列迎新活动，包括新生活力课堂和游园会，时间安排如下：</p>
  <table>
    <thead>
      <tr>
        <th>活动名称</th>
        <th>时间</th>
        <th>地点</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>新生活力课堂</td>
        <td>2024 年 9 月 3 日 19:00 - 20:00</td>
        <td>东区 2105 教室</td>
      </tr>
      <tr>
        <td>新生活力课堂 (西区)</td>
        <td>2024 年 9 月 7 日 15:00 - 17:00</td>
        <td>西区 3C101 教室</td>
      </tr>
      <tr>
        <td>新生活力课堂 (东区)</td>
        <td>2024 年 9 月 8 日 19:00 - 21:00</td>
        <td>东区 5102 教室</td>
      </tr>
      <tr>
        <td>游园会 (中区)</td>
        <td>2024 年 9 月 7 日 11:00 - 14:00</td>
        <td>中区 #61</td>
      </tr>
      <tr>
        <td>游园会 (高新区)</td>
        <td>2024 年 9 月 8 日 10:00 - 13:00</td>
        <td>高新区 #35</td>
      </tr>
    </tbody>
  </table>
  <p>9 月 7 日新生活力课堂的上半场是由杨广源同学带来的《日常生活中的信息安全》，他从信息安全的基本概念出发，为新同学们讲解了信息安全的重要性，并介绍了一些常见的信息安全问题，如密码安全，钓鱼邮件等，以及相应的防范措施。他进一步拓展到了密码学、ARP Spoofing、XSS、SQL Injection 等内容，使同学们对信息安全有了更深入的了解。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/AB9A2077.jpeg" alt="" /></p>
  <p>在活动的下半场，罗嘉宏同学为大家讲解了 GNUPlot、LaTeX 等工具的使用，他通过实例演示了如何使用这些工具来绘制图表、排版文档等，使同学们对这些工具有了初步的了解。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/AB9A2095.jpeg" alt="" /></p>
  <p>在筹备和举办新生活力课堂的同时，LUG 也参加了中区、高新区两场社团游园会，并在现场为新生介绍 LUG 的性质、维护的服务及开设的活动，吸引了不少新生的关注。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/AB9A1916.jpeg" alt="" /></p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/AB9A1977.jpeg" alt="" /></p>
  <p>现场准备的游戏：</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/AB9A1970.jpeg" alt="" /></p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/AB9A1974.jpeg" alt="" /></p>
  <p>分发的贴纸、游戏奖品：</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/AB9A2035.jpeg" alt="" /></p>
  <p>活动照片、讲稿等资料可在 <a href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/">LUG FTP</a> 上查看</p>
  <ul>
    <li><a href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/Information_Security.pdf">《日常生活中的信息安全》PPT</a></li>
    <li><a href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/sgy-gnuplot.pdf">GNUPlot 介绍</a></li>
    <li><a href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2024.09.08_%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82/20240908185437-USTCLUG%20%E6%96%B0%E7%94%9F%E6%B4%BB%E5%8A%9B%E8%AF%BE%E5%A0%82%EF%BC%88%E4%B8%9C%E5%8C%BA%E5%9C%BA%E6%AC%A1%EF%BC%89-%E8%A7%86%E9%A2%91-1.mp4">09.08 活动录屏</a></li>
  </ul>
  ]]></content><author><name>tiankaima</name></author><category term="LUG 活动" /><summary type="html"><![CDATA[中国科学技术大学 Linux 用户协会在秋季学期举办了系列迎新活动，包括新生活力课堂和游园会，时间安排如下：]]></summary></entry><entry><title type="html">2024 软件自由日 (SFD) 讲座征集</title><link href="https://lug.ustc.edu.cn/news/2024/08/SFD-Prep/" rel="alternate" type="text/html" title="2024 软件自由日 (SFD) 讲座征集" /><published>2024-08-15T15:00:00+08:00</published><updated>2024-09-15T01:34:15+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/08/SFD-Prep</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/08/SFD-Prep/"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Software_Freedom_Day">软件自由日</a>（Software Freedom Day，SFD）是在 Digital Freedom Foundation 的主办下，由自由/开源软件爱好者自发筹集组织非盈利性活动，旨在为自由/开源软件爱好者提供一个信息交流平台、联合各社区举办各种自由/开源软件活动。</p>
  <p>作为合肥地区最大的 Linux 用户组织，中国科大 Linux 用户协会致力于通过 SFD 普及软件自由思想，凝聚自由软件社区，将优秀的自由软件介绍给更多开源社区的成员，最大限度帮助自由软件作者实现服务于开源社群的价值。</p>
  <p>今年的软件自由日活动预计于 2024 年 9 月 21 日（九月第三个星期六）于中国科学技术大学（合肥）举行，<strong>现面向校内外所有社区成员公开征集软件自由日讲座或其他与主题有关的活动</strong>，有意愿的社区成员可尽快联系我们。</p>
  <p><a href="/wiki/lug/contact">联系方式</a></p>
  <p><a href="/wiki/lug/events/sfd">往届活动和详细介绍</a></p>
  <ul>
    <li><a href="/news/2023/09/SFD/">2023 SFD</a></li>
    <li><a href="/news/2022/09/SFD/">2022 SFD</a></li>
    <li><a href="/news/2021/09/SFD/">2021 SFD</a></li>
  </ul>
  ]]></content><author><name>tiankaima</name></author><category term="LUG 活动" /><summary type="html"><![CDATA[软件自由日（Software Freedom Day，SFD）是在 Digital Freedom Foundation 的主办下，由自由/开源软件爱好者自发筹集组织非盈利性活动，旨在为自由/开源软件爱好者提供一个信息交流平台、联合各社区举办各种自由/开源软件活动。]]></summary></entry><entry><title type="html">USTCLUG 西区活动室搬迁</title><link href="https://lug.ustc.edu.cn/news/2024/05/403/" rel="alternate" type="text/html" title="USTCLUG 西区活动室搬迁" /><published>2024-05-28T15:00:00+08:00</published><updated>2024-05-28T15:33:36+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/05/403</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/05/403/"><![CDATA[<p>2024 年 4 月中旬，USTCLUG 西区活动室正式搬迁至西区图书馆 403 研讨室。</p>
  <p>403 研讨室指路：</p>
  <ol>
    <li>
      <p>图书馆进门后，通过两侧的楼梯上四楼，如图：
        <img src="https://ftp.lug.ustc.edu.cn/misc/403/2024-05-28_14-53-30.png" alt="" />
        <img src="https://ftp.lug.ustc.edu.cn/misc/403/photo_2024-05-26_21-56-13.jpg" alt="" />
        <img src="https://ftp.lug.ustc.edu.cn/misc/403/photo_2024-05-26_21-56-17.jpg" alt="" /></p>
      <p>注意：电梯无法直达 403 研讨室，需要先乘坐到三楼，再通过楼梯步行至四楼。</p>
    </li>
    <li>
      <p>403 室位于走廊中间，如图：
        <img src="https://ftp.lug.ustc.edu.cn/misc/403/photo_2024-05-28_15-05-25.jpg" alt="" /></p>
    </li>
  </ol>
  ]]></content><author><name>aka-dag</name></author><summary type="html"><![CDATA[2024 年 4 月中旬，USTCLUG 西区活动室正式搬迁至西区图书馆 403 研讨室。]]></summary></entry><entry><title type="html">使用 Rclone 备份 OneDrive 内容</title><link href="https://lug.ustc.edu.cn/planet/2024/05/onedrive-backup-with-rclone/" rel="alternate" type="text/html" title="使用 Rclone 备份 OneDrive 内容" /><published>2024-05-10T00:00:00+08:00</published><updated>2024-09-15T01:34:15+08:00</updated><id>https://lug.ustc.edu.cn/planet/2024/05/onedrive-backup-with-rclone</id><content type="html" xml:base="https://lug.ustc.edu.cn/planet/2024/05/onedrive-backup-with-rclone/"><![CDATA[<p>本文用于介绍如何使用 Rclone 备份 OneDrive 内容。</p>
  <h2 id="rclone-简介">Rclone 简介</h2>
  <p>Rclone 是一个命令行工具，用于同步文件和目录到和从云存储服务。它支持 Google Drive、Amazon S3、Dropbox、Microsoft OneDrive、Yandex Disk、Box 和其他一些云存储服务。Rclone 是一个 Go 程序，可以在 Windows、macOS、Linux 和其他操作系统上运行。</p>
  <h2 id="安装-rclone">安装 Rclone</h2>
  <p>Rclone 官方的下载链接在 <a href="https://rclone.org/downloads/">这里</a>。你可以根据自己的操作系统下载对应的版本。</p>
  <p>部分常见的包管理工具也提供了 Rclone 的安装方式，例如：</p>
  <ul>
    <li>
      <p>在 Windows 上，你可以使用 Chocolatey 安装 Rclone：</p>
      <div class="language-bash highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code>choco <span class="nb">install </span>rclone
</code></pre>
        </div>
    </div>
    </li>
    <li>
      <p>在 Windows 上，你也可以使用 Winget 安装 Rclone：</p>
      <div class="language-bash highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code>winget <span class="nb">install </span>Rclone.Rclone
</code></pre>
        </div>
    </div>
    </li>
    <li>
      <p>在 macOS 上，你可以使用 Homebrew 安装 Rclone：</p>
      <div class="language-bash highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code>brew <span class="nb">install </span>rclone
</code></pre>
        </div>
    </div>
    </li>
    <li>
      <p>在 Ubuntu 上，你可以使用 apt 安装 Rclone：</p>
      <div class="language-bash highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>rclone
</code></pre>
        </div>
    </div>
    </li>
    <li>
      <p>更多包管理器的安装方法可以参考 <a href="https://rclone.org/install/#package-manager">Rclone 官方文档</a>。</p>
    </li>
  </ul>
  <p>运行 <code class="language-plaintext highlighter-rouge">rclone --version</code> 来检查 Rclone 是否安装成功，如果正常，你应该类似看到如下输出：</p>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>rclone <span class="nt">--version</span>
<span class="go">rclone v1.66.0
- os/version: darwin 14.5 (64 bit)
- os/kernel: 23.5.0 (arm64)
- os/type: darwin
- os/arch: arm64 (ARMv8 compatible)
- go/version: go1.22.1
- go/linking: dynamic
- go/tags: none
</span></code></pre>
    </div>
  </div>
  <h2 id="配置-rclone">配置 Rclone</h2>
  <p>我们在这里以 <code class="language-plaintext highlighter-rouge">mail.ustc.edu.cn</code> 为例，做一个 step-by-step 的教程：</p>
  <div class="language-bash highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code>rclone config
</code></pre>
    </div>
  </div>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">No remotes found, make a new one?
n) New remote
s) Set configuration password
q) Quit config
</span><span class="gp">n/s/q&gt;</span><span class="w">
</span></code></pre>
    </div>
  </div>
  <p>输入 <code class="language-plaintext highlighter-rouge">n</code>，然后回车。</p>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">Enter name for new remote.
</span><span class="gp">name&gt;</span><span class="w">
</span></code></pre>
    </div>
  </div>
  <p>输入一个名字，这里我们输入 <code class="language-plaintext highlighter-rouge">onedrive</code>，然后回车。</p>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">Option Storage.
Type of storage to configure.
Choose a number from below, or type in your own value.
 1 / 1Fichier
   \ (fichier)
 2 / Akamai NetStorage
   \ (netstorage)
 3 / Alias for an existing remote
   \ (alias)
 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, ArvanCloud, Ceph, ChinaMobile, Cloudflare, DigitalOcean, Dreamhost, GCS, HuaweiOBS, IBMCOS, IDrive, IONOS, LyveCloud, Leviia, Liara, Linode, Minio, Netease, Petabox, RackCorp, Rclone, Scaleway, SeaweedFS, StackPath, Storj, Synology, TencentCOS, Wasabi, Qiniu and others
   \ (s3)

</span><span class="c">...
</span><span class="go">
33 / Microsoft OneDrive
   \ (onedrive)

</span><span class="c">...
</span><span class="go">
</span><span class="gp">Storage&gt;</span><span class="w">
</span></code></pre>
    </div>
  </div>
  <p>输入 <code class="language-plaintext highlighter-rouge">onedrive</code>，然后回车。</p>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">Option client_id.
OAuth Client Id.
Leave blank normally.
Enter a value. Press Enter to leave empty.
</span><span class="gp">client_id&gt;</span><span class="w">
</span><span class="go">
Option client_secret.
OAuth Client Secret.
Leave blank normally.
Enter a value. Press Enter to leave empty.
</span><span class="gp">client_secret&gt;</span><span class="w">
</span><span class="go">
Option region.
Choose national cloud region for OneDrive.
Choose a number from below, or type in your own string value.
Press Enter for the default (global).
 1 / Microsoft Cloud Global
   \ (global)
 2 / Microsoft Cloud for US Government
   \ (us)
 3 / Microsoft Cloud Germany
   \ (de)
 4 / Azure and Office 365 operated by Vnet Group in China
   \ (cn)
</span><span class="gp">region&gt;</span><span class="w">
</span><span class="go">
Edit advanced config?
y) Yes
n) No (default)
</span><span class="gp">y/n&gt;</span><span class="w">
</span><span class="go">
Use web browser to automatically authenticate rclone with remote?
 * Say Y if the machine running rclone has a web browser you can use
 * Say N if running rclone on a (remote) machine without web browser access
If not sure try Y. If Y failed, try N.

y) Yes (default)
n) No
</span><span class="gp">y/n&gt;</span><span class="w">
</span></code></pre>
    </div>
  </div>
  <p>这里我们都直接回车，不输入任何内容。(五次回车)</p>
  <p>在这其中会弹出一个网页，让你登录你的 OneDrive 账号，然后授权 Rclone 访问你的 OneDrive 账号。</p>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">Option config_type.
Type of connection
Choose a number from below, or type in an existing string value.
Press Enter for the default (onedrive).
 1 / OneDrive Personal or Business
   \ (onedrive)
 2 / Root Sharepoint site
   \ (sharepoint)
   / Sharepoint site name or URL
 3 | E.g. mysite or https://contoso.sharepoint.com/sites/mysite
   \ (url)
 4 / Search for a Sharepoint site
   \ (search)
 5 / Type in driveID (advanced)
   \ (driveid)
 6 / Type in SiteID (advanced)
   \ (siteid)
   / Sharepoint server-relative path (advanced)
 7 | E.g. /teams/hr
   \ (path)
</span><span class="gp">config_type&gt;</span><span class="w">
</span></code></pre>
    </div>
  </div>
  <p>这里我们直接回车，不输入任何内容。</p>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">Option config_driveid.
Select drive you want to use
Choose a number from below, or type in your own string value.
Press Enter for the default (b!****************************************************************).
 1 / OneDrive (business)
   \ (b!****************************************************************)
</span><span class="gp">config_driveid&gt;</span><span class="w">
</span><span class="go">
Drive OK?

Found drive "root" of type "business"
URL: https://mailustceducn-my.sharepoint.com/personal/tiankaima_mail_ustc_edu_cn/Documents

y) Yes (default)
n) No
</span><span class="gp">y/n&gt;</span><span class="w">
</span><span class="go">
Configuration complete.
Options:
- type: onedrive
- token:
***
- drive_id: b!****************************************************************
- drive_type: business
Keep this "onedrive" remote?
y) Yes this is OK (default)
e) Edit this remote
d) Delete this remote
</span><span class="gp">y/e/d&gt;</span><span class="w">
</span></code></pre>
    </div>
  </div>
  <p>依旧是直接回车，不输入任何内容。</p>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">Current remotes:

Name                 Type
====                 ====
onedrive             onedrive

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
</span><span class="gp">e/n/d/r/c/s/q&gt;</span><span class="w">
</span></code></pre>
    </div>
  </div>
  <p>输入 <code class="language-plaintext highlighter-rouge">q</code>，然后回车。现在我们已经配置好了 Rclone。</p>
  <h2 id="将文件从-onedrive-备份到本地">将文件从 OneDrive 备份到本地</h2>
  <div class="language-console highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="go">rclone copy onedrive: /path/to/local/folder -P
</span></code></pre>
    </div>
  </div>
  <h2 id="总结">总结</h2>
  <p>Rclone 是个非常强大的工具，支持的云存储服务也非常多，你可以通过 <code class="language-plaintext highlighter-rouge">rclone config</code> 来配置其他的云存储服务。</p>
  <p>限于篇幅和时间关系，本文只介绍了 Rclone 的基本使用方法，更多的功能和用法请参考 <a href="https://rclone.org/docs/">Rclone 官方文档</a>。</p>
  <p>如果您对这篇内容有任何问题或建议，欢迎 <a href="/wiki/lug/contact/">联系我们</a>。</p>
  ]]></content><author><name>tiankaima</name></author><category term="Tech Tutorial" /><category term="rclone" /><category term="OneDrive" /><summary type="html"><![CDATA[本文用于介绍如何使用 Rclone 备份 OneDrive 内容。]]></summary></entry><entry><title type="html">Linux 图形堆栈初探</title><link href="https://lug.ustc.edu.cn/news/2024/04/gathering-linux-graphics-journey/" rel="alternate" type="text/html" title="Linux 图形堆栈初探" /><published>2024-04-21T15:00:00+08:00</published><updated>2024-06-16T12:59:53+08:00</updated><id>https://lug.ustc.edu.cn/news/2024/04/gathering-linux-graphics-journey</id><content type="html" xml:base="https://lug.ustc.edu.cn/news/2024/04/gathering-linux-graphics-journey/"><![CDATA[<p>2024 年 4 月 21 日，校学生 Linux 用户协会举办了一场小聚活动。本次小聚为刘紫檀同学为我们带来的关于 Linux 图形堆栈的介绍。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/weekly_party/2024.04.21_Linux_Graphics_Journey/photo/C674688314E3F9149BAEAD6DE8A024EA.jpg" alt="" /></p>
  <p>在活动的开始，刘紫檀同学介绍了他本人阅读图形栈程序的心得体会，同时分享了自己编写的一个能够便捷阅读 Archlinux 源码的脚本。刘同学认为在阅读程序时需要了解功能间的界面，并以 Wayland 协议来举例说明。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/weekly_party/2024.04.21_Linux_Graphics_Journey/photo/6C0D0AD15BB58A9211D3F4AD0F0F42C8.png" alt="" /></p>
  <p>随后，刘紫檀介绍了 GUI 程序的基本构成。刘同学向大家展示了 CLI 与 GUI 程序代码，解释了其基本的组成部分，由实现最基础的功能到处理复杂的用户需求。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/weekly_party/2024.04.21_Linux_Graphics_Journey/photo/F939405C44EA3364304AE83FA5AF7FAD.png" alt="" /></p>
  <p>刘紫檀重点介绍了 GUI 程序绘制技术的演进，以 PC /Linux 上的图形显示为主线进行了整理。首先刘同学介绍了帧缓冲设备（fbdev），给大家展示了历代不同产商生产的显卡，并说明了帧缓冲设备的工作流程与基本操作。紧接着，刘同学介绍了历史悠久的 X 窗口系统、早期与现代的 DRI、DRM 框架等，在最后介绍了 Wayland 协议。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/weekly_party/2024.04.21_Linux_Graphics_Journey/photo/88F681B958C76D6F349FB070DB260E8D.jpg" alt="" /></p>
  <p>活动接近尾声，刘同学用一张图表梳理了今天小聚的内容脉络，与现场的同学们展开了相关的交流。</p>
  <p><img src="https://ftp.lug.ustc.edu.cn/weekly_party/2024.04.21_Linux_Graphics_Journey/photo/D145719FD50F4095BBA726CF654291A3.png" alt="" /></p>
  <p>小聚录像已上传至 ftp：<a href="https://ftp.lug.ustc.edu.cn/weekly_party/2024.04.21_Linux_Graphics_Journey/video/Linux_Graphics_Journey.mp4">Linux 图形堆栈初探</a></p>
  ]]></content><author><name>aka-dag</name></author><category term="LUG 活动" /><category term="LUG 小聚" /><summary type="html"><![CDATA[2024 年 4 月 21 日，校学生 Linux 用户协会举办了一场小聚活动。本次小聚为刘紫檀同学为我们带来的关于 Linux 图形堆栈的介绍。]]></summary></entry></feed>